// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/outscale/osc-bsu-csi-driver/pkg/cloud (interfaces: OscInterface)
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=./pkg/cloud/mocks/mock_osc.go github.com/outscale/osc-bsu-csi-driver/pkg/cloud OscInterface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	http "net/http"
	reflect "reflect"

	osc "github.com/outscale/osc-sdk-go/v2"
	gomock "go.uber.org/mock/gomock"
)

// MockOscInterface is a mock of OscInterface interface.
type MockOscInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOscInterfaceMockRecorder
	isgomock struct{}
}

// MockOscInterfaceMockRecorder is the mock recorder for MockOscInterface.
type MockOscInterfaceMockRecorder struct {
	mock *MockOscInterface
}

// NewMockOscInterface creates a new mock instance.
func NewMockOscInterface(ctrl *gomock.Controller) *MockOscInterface {
	mock := &MockOscInterface{ctrl: ctrl}
	mock.recorder = &MockOscInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOscInterface) EXPECT() *MockOscInterfaceMockRecorder {
	return m.recorder
}

// CreateSnapshot mocks base method.
func (m *MockOscInterface) CreateSnapshot(ctx context.Context, localVarOptionals osc.CreateSnapshotRequest) (osc.CreateSnapshotResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSnapshot", ctx, localVarOptionals)
	ret0, _ := ret[0].(osc.CreateSnapshotResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateSnapshot indicates an expected call of CreateSnapshot.
func (mr *MockOscInterfaceMockRecorder) CreateSnapshot(ctx, localVarOptionals any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnapshot", reflect.TypeOf((*MockOscInterface)(nil).CreateSnapshot), ctx, localVarOptionals)
}

// CreateTags mocks base method.
func (m *MockOscInterface) CreateTags(ctx context.Context, localVarOptionals osc.CreateTagsRequest) (osc.CreateTagsResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTags", ctx, localVarOptionals)
	ret0, _ := ret[0].(osc.CreateTagsResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateTags indicates an expected call of CreateTags.
func (mr *MockOscInterfaceMockRecorder) CreateTags(ctx, localVarOptionals any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTags", reflect.TypeOf((*MockOscInterface)(nil).CreateTags), ctx, localVarOptionals)
}

// CreateVolume mocks base method.
func (m *MockOscInterface) CreateVolume(ctx context.Context, localVarOptionals osc.CreateVolumeRequest) (osc.CreateVolumeResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVolume", ctx, localVarOptionals)
	ret0, _ := ret[0].(osc.CreateVolumeResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateVolume indicates an expected call of CreateVolume.
func (mr *MockOscInterfaceMockRecorder) CreateVolume(ctx, localVarOptionals any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVolume", reflect.TypeOf((*MockOscInterface)(nil).CreateVolume), ctx, localVarOptionals)
}

// DeleteSnapshot mocks base method.
func (m *MockOscInterface) DeleteSnapshot(ctx context.Context, localVarOptionals osc.DeleteSnapshotRequest) (osc.DeleteSnapshotResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSnapshot", ctx, localVarOptionals)
	ret0, _ := ret[0].(osc.DeleteSnapshotResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeleteSnapshot indicates an expected call of DeleteSnapshot.
func (mr *MockOscInterfaceMockRecorder) DeleteSnapshot(ctx, localVarOptionals any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSnapshot", reflect.TypeOf((*MockOscInterface)(nil).DeleteSnapshot), ctx, localVarOptionals)
}

// DeleteVolume mocks base method.
func (m *MockOscInterface) DeleteVolume(ctx context.Context, localVarOptionals osc.DeleteVolumeRequest) (osc.DeleteVolumeResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVolume", ctx, localVarOptionals)
	ret0, _ := ret[0].(osc.DeleteVolumeResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeleteVolume indicates an expected call of DeleteVolume.
func (mr *MockOscInterfaceMockRecorder) DeleteVolume(ctx, localVarOptionals any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVolume", reflect.TypeOf((*MockOscInterface)(nil).DeleteVolume), ctx, localVarOptionals)
}

// LinkVolume mocks base method.
func (m *MockOscInterface) LinkVolume(ctx context.Context, localVarOptionals osc.LinkVolumeRequest) (osc.LinkVolumeResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkVolume", ctx, localVarOptionals)
	ret0, _ := ret[0].(osc.LinkVolumeResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LinkVolume indicates an expected call of LinkVolume.
func (mr *MockOscInterfaceMockRecorder) LinkVolume(ctx, localVarOptionals any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkVolume", reflect.TypeOf((*MockOscInterface)(nil).LinkVolume), ctx, localVarOptionals)
}

// ReadSnapshots mocks base method.
func (m *MockOscInterface) ReadSnapshots(ctx context.Context, localVarOptionals osc.ReadSnapshotsRequest) (osc.ReadSnapshotsResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadSnapshots", ctx, localVarOptionals)
	ret0, _ := ret[0].(osc.ReadSnapshotsResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadSnapshots indicates an expected call of ReadSnapshots.
func (mr *MockOscInterfaceMockRecorder) ReadSnapshots(ctx, localVarOptionals any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadSnapshots", reflect.TypeOf((*MockOscInterface)(nil).ReadSnapshots), ctx, localVarOptionals)
}

// ReadSubregions mocks base method.
func (m *MockOscInterface) ReadSubregions(ctx context.Context, localVarOptionals osc.ReadSubregionsRequest) (osc.ReadSubregionsResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadSubregions", ctx, localVarOptionals)
	ret0, _ := ret[0].(osc.ReadSubregionsResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadSubregions indicates an expected call of ReadSubregions.
func (mr *MockOscInterfaceMockRecorder) ReadSubregions(ctx, localVarOptionals any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadSubregions", reflect.TypeOf((*MockOscInterface)(nil).ReadSubregions), ctx, localVarOptionals)
}

// ReadVms mocks base method.
func (m *MockOscInterface) ReadVms(ctx context.Context, localVarOptionals osc.ReadVmsRequest) (osc.ReadVmsResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadVms", ctx, localVarOptionals)
	ret0, _ := ret[0].(osc.ReadVmsResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadVms indicates an expected call of ReadVms.
func (mr *MockOscInterfaceMockRecorder) ReadVms(ctx, localVarOptionals any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadVms", reflect.TypeOf((*MockOscInterface)(nil).ReadVms), ctx, localVarOptionals)
}

// ReadVolumes mocks base method.
func (m *MockOscInterface) ReadVolumes(ctx context.Context, localVarOptionals osc.ReadVolumesRequest) (osc.ReadVolumesResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadVolumes", ctx, localVarOptionals)
	ret0, _ := ret[0].(osc.ReadVolumesResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadVolumes indicates an expected call of ReadVolumes.
func (mr *MockOscInterfaceMockRecorder) ReadVolumes(ctx, localVarOptionals any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadVolumes", reflect.TypeOf((*MockOscInterface)(nil).ReadVolumes), ctx, localVarOptionals)
}

// UnlinkVolume mocks base method.
func (m *MockOscInterface) UnlinkVolume(ctx context.Context, localVarOptionals osc.UnlinkVolumeRequest) (osc.UnlinkVolumeResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlinkVolume", ctx, localVarOptionals)
	ret0, _ := ret[0].(osc.UnlinkVolumeResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UnlinkVolume indicates an expected call of UnlinkVolume.
func (mr *MockOscInterfaceMockRecorder) UnlinkVolume(ctx, localVarOptionals any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlinkVolume", reflect.TypeOf((*MockOscInterface)(nil).UnlinkVolume), ctx, localVarOptionals)
}

// UpdateVolume mocks base method.
func (m *MockOscInterface) UpdateVolume(ctx context.Context, localVarOptionals osc.UpdateVolumeRequest) (osc.UpdateVolumeResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVolume", ctx, localVarOptionals)
	ret0, _ := ret[0].(osc.UpdateVolumeResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateVolume indicates an expected call of UpdateVolume.
func (mr *MockOscInterfaceMockRecorder) UpdateVolume(ctx, localVarOptionals any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVolume", reflect.TypeOf((*MockOscInterface)(nil).UpdateVolume), ctx, localVarOptionals)
}
