name: e2e_test

on:
  pull_request:
    branches:
      - OSC-MIGRATION
      - master
    paths:
      - "**.go"
      - "Dockerfile"
      - "Makefile"
      - "go.*"
      - "osc-bsu-csi-driver/**.yaml"
      - ".github/workflows/e2e_test.yml"
  workflow_dispatch:

jobs:
  e2e:
    runs-on: [self-hosted, linux]
    steps:
    - name: ⬇️ Checkout repository
      uses: actions/checkout@v4
    - name: ⬇️ Checkout RKE
      uses: actions/checkout@v4
      with:
        repository: 'outscale/osc-k8s-rke-cluster'
        path: "set-up-rke-cluster"
    - name: 🔐 Set ak/sk name based on runner region
      run: .github/scripts/runneraksk.sh
    - name: ⬇️ Install kubectl
      uses: azure/setup-kubectl@v4
      with:
        version: v1.30.7
    - name: ⬇️ Install helm
      uses: azure/setup-helm@v4
      with:
        version: v3.16.2
    - name: ⬇️ Install Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
    - name: 🧹 Frieza
      uses: outscale/frieza-github-actions/frieza-clean@master
      with:
        access_key: ${{ secrets[env.OSC_ACCESS_KEY_NAME] }}
        secret_key: ${{ secrets[env.OSC_SECRET_KEY_NAME] }}
        region: ${{ env.OSC_REGION }}
    - name: 👷 Deploy Cluster
      uses: outscale/osc-k8s-rke-cluster/github_actions/deploy_cluster@master
      with:
        repository_folder: "set-up-rke-cluster"
        osc_access_key: ${{ secrets[env.OSC_ACCESS_KEY_NAME] }}
        osc_secret_key: ${{ secrets[env.OSC_SECRET_KEY_NAME] }}
        osc_region: ${{ env.OSC_REGION }}
        image_id: ${{ vars[env.OMI_ID_NAME] }}
        rke_version: ${{ vars.RKE_VERSION_E2E }}
        kubernetes_version: ${{ vars.K8S_VERSION_E2E }}
    - name: ⏱️ Wait to access the cluster
      uses: nick-invision/retry@v3
      with:
        timeout_seconds: 60
        max_attempts: 10
        command: kubectl get nodes
      env:
        KUBECONFIG: set-up-rke-cluster/rke/kube_config_cluster.yml
    - name: 👷 Deploy Docker-registry into cluster
      run: |
        ansible-playbook addons/docker-registry/playbook.yaml
        ./addons/docker-registry/start_port_forwarding.sh &
      env:
        KUBECONFIG: rke/kube_config_cluster.yml
        ANSIBLE_CONFIG: ansible.cfg
      working-directory: set-up-rke-cluster
    - name: 📦 Build & Push the Docker image
      run: |
        make buildx-image image-tag image-push
        docker image prune -a -f
      env:
        REGISTRY_IMAGE: localhost:4242/csi
        IMAGE_TAG: ${{ github.sha }}
        REGISTRY_TAG: ${{ github.sha }}
    - name: 🔎 Retrieve NodePort ip/port
      run: |
        echo nodeport_port=$(kubectl get --namespace default -o jsonpath="{.spec.ports[0].nodePort}" services docker-registry) >> $GITHUB_ENV
        echo nodeport_ip=$(kubectl get nodes --namespace default -o jsonpath="{.items[0].status.addresses[0].address}")  >> $GITHUB_ENV
      env:
        KUBECONFIG: set-up-rke-cluster/rke/kube_config_cluster.yml
    - name: 👷 Install CSI
      run: |
        kubectl apply -f set-up-rke-cluster/addons/csi/secrets.yaml
        kubectl apply -f https://raw.githubusercontent.com/kubernetes-csi/external-snapshotter/release-8.0/client/config/crd/snapshot.storage.k8s.io_volumesnapshotclasses.yaml
        kubectl apply -f https://raw.githubusercontent.com/kubernetes-csi/external-snapshotter/release-8.0/client/config/crd/snapshot.storage.k8s.io_volumesnapshotcontents.yaml
        kubectl apply -f https://raw.githubusercontent.com/kubernetes-csi/external-snapshotter/release-8.0/client/config/crd/snapshot.storage.k8s.io_volumesnapshots.yaml
        kubectl apply -f https://raw.githubusercontent.com/kubernetes-csi/external-snapshotter/release-8.0/deploy/kubernetes/snapshot-controller/rbac-snapshot-controller.yaml
        kubectl apply -f https://raw.githubusercontent.com/kubernetes-csi/external-snapshotter/release-8.0/deploy/kubernetes/snapshot-controller/setup-snapshot-controller.yaml
        TARGET_IMAGE=${nodeport_ip}:${nodeport_port}/csi TARGET_TAG=$IMAGE_TAG make helm_deploy 
      env:
        KUBECONFIG: set-up-rke-cluster/rke/kube_config_cluster.yml
        OSC_REGION: ${{ env.OSC_REGION}}
        IMAGE_TAG: ${{ github.sha }}
    - name: 🧪 Run e2e tests
      run: make test-e2e
      env:
        KUBECONFIG: ${{ github.workspace }}/set-up-rke-cluster/rke/kube_config_cluster.yml
        OSC_ACCESS_KEY: ${{ secrets[env.OSC_ACCESS_KEY_NAME] }}
        OSC_SECRET_KEY: ${{ secrets[env.OSC_SECRET_KEY_NAME] }}
        OSC_REGION: ${{ env.OSC_REGION }}
        AWS_AVAILABILITY_ZONES: ${{ env.OSC_SUBREGION_NAME }}